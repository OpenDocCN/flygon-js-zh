["```js\nconst jsArray = [];\n```", "```js\nconst foodList = ['sushi', 'fried chicken', 21];\n```", "```js\nconst sushi = foodList[0];\nfoodList[2] = 'steak';\n```", "```js\n    > let exampleArray1 = [];\n    => undefined\n    > Array.isArray(exampleArray1);\n    => true\n    ```", "```js\n    > let exampleArray2 = new Array();\n    => undefined\n    > Array.isArray(exampleArray2);\n    => true\n    ```", "```js\n    > let exampleArray3 = [];\n    => undefined\n    > typeof exampleArray3\n    => 'object'\n    ```", "```js\n    > let exampleArray4 = new Array(6)\n    => undefined\n    > exampleArray4\n    => [ <6 empty items> ]\n    or\n    > let singers = new Array(6).fill('miku')\n    => undefined\n    > singers\n    => [ 'miku', 'miku', 'miku', 'miku', 'miku', 'miku' ]\n    ```", "```js\n    > singers[0] = 'miku'\n    => 'miku'\n    > singers\n    => [ 'miku' ]\n    ```", "```js\n    > singers[3] = 'luka'\n    => 'luka'\n    > singers[1]\n    => undefined\n    ```", "```js\n    > singers[singers.length - 1] = 'rin'\n    => 'rin'\n    > singers\n    => [ 'miku', 'miku', 'miku', 'miku', 'miku', 'rin' ]\n    ```", "```js\n    > let singers = [];\n    => undefined\n    ```", "```js\n    > singers.push('miku')\n    => 1\n    > singers\n    => [ 'miku' ]\n    ```", "```js\n    > let food = new Array(3)\n    => undefined\n    > food.push('burger')\n    => 4\n    > food\n    => [ <3 empty items>, 'burger' ]\n    ```", "```js\n    > singers.push('me')\n    => 2\n    > singers\n    => [ 'miku', 'me' ]\n    > singers.pop()\n    => 'me'\n    > singers\n    => [ 'miku' ]\n    ```", "```js\n    > singers.unshift('rin')\n    => 2\n    > singers\n    => [ 'rin', 'miku' ]\n    ```", "```js\n    > singers.shift()\n    => 'rin'\n    > singers\n    => [ 'miku' ]\n    ```", "```js\n    > let foods = []\n    => undefined\n    > foods.push('burger')\n    => 1\n    > foods.push('fries')\n    => 2\n    > foods.push('wings')\n    => 3\n    ```", "```js\n    > foods.indexOf('burger')\n    => 0\n    ```", "```js\n    > foods.length\n    => 3\n    ```", "```js\n    > let position = foods.indexOf('burger')\n    => undefined\n    > foods.splice(position, 1) // splice(startIndex, deleteCount)\n    => [ 'burger' ]\n    > foods\n    => [ 'fries', 'wings' ]\n    ```", "```js\nconst myObj = {};\n```", "```js\nmyObj.item1 = 'item1';\nmyObj.item2 = 12;\n```", "```js\nconst item = myObj.item1;\n```", "```js\n> dancers = []\n=> undefined\n> dancers.push({ name: 'joey', age: 30 })\n=> undefined\n```", "```js\n> let myConsole = { name: 'PS4', color: 'black', price: 499, library: []}\n=> undefined\n```", "```js\n> Object.keys(myConsole)\n=> [ 'name', 'color', 'price', 'library' ]\n```", "```js\n> if (myConsole.ramSize) {\n... console.log('ram size is defined.');\n... }\n> undefined\n```", "```js\n> if (myConsole.price) {\n... console.log('price is defined.');\n... }\n> price is defined.\n```", "```js\n    > singers = []\n    => undefined\n    ```", "```js\n    > singers.push({ name: 'miku', age: 16 })\n    => undefined\n    ```", "```js\n    > singers[0].name = 'Hatsune Miku'\n    => 'Hatsune Miku'\n    > singers\n    => [ { name: 'Hatsune Miku', age: 16 } ]\n    ```", "```js\n    > singers[0].birthday = 'August 31'\n    => 'August 31'\n    > singers\n    => [ { name: 'Hatsune Miku', age: 16, birthday: 'August 31' } ]\n    ```", "```js\n    > singers[0].name\n    => 'Hatsune Miku'\n    or\n    > const propertyName = 'name'\n    => undefined\n    > singers[0][propertyName]\n    => 'Hatsune Miku'\n    ```", "```js\nconst user = {\n   name: 'r1cebank',\n   favoriteFood: [\n      'ramen',\n      'sushi',\n      'fried chicken'\n   ]\n};\n```", "```js\nJSON.stringify(user);\n```", "```js\n    function betterStringify(item, propertyMap) {\n    }\n    ```", "```js\n    let output = {};\n    ```", "```js\n    propertyMap.forEach((key) => {\n    });\n    ```", "```js\n    propertyMap.forEach((key) => {\n    if (item[key]) {\n       output[key] = item[key];\n    }\n    });\n    ```", "```js\n    const singer = {\n     name: 'Hatsune Miku',\n     age: 16,\n     birthday: 'August 31',\n     birthplace: 'Sapporo, Japan',\n     songList: [\n      'World is mine',\n      'Tell your world',\n      'Melt'\n     ]\n    }\n    console.log(betterStringify(singer, ['name', 'birthday']))\n    ```", "```js\nconst param = ['My Name', 12, 'Developer'];\n```", "```js\nconst name = param[0];\nconst age = param[1];\nconst job = param[2];\n```", "```js\n[name, age, job] = param;\n```", "```js\n    > const userInfo = ['John', 'chef', 34]\n    => undefined\n    ```", "```js\n    > let name, age, job\n    => undefined\n    ```", "```js\n    > [name, job, age] = userInfo\n    => [ 'John', 'chef', 34 ]\n    ```", "```js\n    > name\n    => 'John'\n    > job\n    => 'chef'\n    > age\n    => 34\n    ```", "```js\n    > [name, ,age] = userInfo\n    => [ 'John', 'chef', 34 ] // we ignored the second element 'chef'\n    ```", "```js\n    > const userInfo = { name: 'John', job: 'chef', age: 34 }\n    => undefined\n    ```", "```js\n    > let name, job\n    => undefined\n    ```", "```js\n    > ({ name, job } = userInfo)\n    => { name: 'John', job: 'chef', age: 34 }\n    ```", "```js\n    > name\n    => 'John'\n    > job\n    => 'chef'\n    ```", "```js\n    > userInfo = ['John', 'chef', 34]\n    => undefined\n    > [ name, , age] = userInfo\n    => undefined\n    > name\n    => 'John'\n    > age\n    => 34\n    ```", "```js\n    > const userInfoObj = { name: 'John', job: 'chef', age: 34 }\n    => undefined\n    > let { job } = userInfoObj\n    => undefined\n    > job\n    => 'chef'\n    ```", "```js\nprintUser(...userInfo)\n```", "```js\n    > const userInfo = ['John', 'chef', 34]\n    => undefined\n    ```", "```js\n    > function printUser(name, job, age) {\n    ... console.log(name + ' is working as ' + job + ' and is ' + age + ' years old');\n    ... }\n    => undefined\n    ```", "```js\n    > printUser(...userInfo)\n    John is working as chef and is 34 years old\n    ```", "```js\n    > const detailedInfo = ['male', ...userInfo, 'July 5']\n    => [ 'male', 'John', 'chef', 34, 'July 5' ]\n    ```", "```js\n    > let detailedInfoCopy = [ ...detailedInfo ];\n    => undefined\n    > detailedInfoCopy\n    => [ 'male', 'John', 'chef', 34, 'July 5' ]\n    ```", "```js\n    > const userRequest = { name: 'username', type: 'update', data: 'newname'}\n    => undefined\n    ```", "```js\n    > const newObj = { ...userRequest }\n    => undefined\n    > newObj\n    => { name: 'username', type: 'update', data: 'newname' }\n    ```", "```js\n    > const detailedRequestObj = { data: new Date(), new: true, ...userRequest}\n    => undefined\n    > detailedRequestObj\n    => { data: 'newname', new: true, name: 'username', type: 'update' }\n    ```", "```js\nfunction sum(...numbers) {\n   console.log(numbers);\n}\nsum(1, 2, 3, 4, 5, 6, 7, 8, 9);\n```", "```js\nfunction sum(initial, ...numbers) {\n   console.log(initial, numbers);\n}\n```", "```js\nsum(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n```", "```js\nfunction Food(name) {\n   this.name = name;\n}\nvar leek = new Food(\"leek\");\nconsole.log(leek.name); // Outputs \"leek\"\n```", "```js\nfunction ClassName(param1, param2) {\n   // Constructor Logic\n}\n```", "```js\nclass ClassName {\n   constructor(param1, param2) {\n      // Constructor logic\n   }\n   method1(param) {\n      // Method logic\n   }\n}\n```", "```js\n    function Food(name, calories, cost) {\n       this.name = name;\n       this.calories = calories;\n       this.cost = cost;\n    }\n    ```", "```js\n    Food.prototype.description = function () {\n       return this.name + ' calories: ' + this.calories;\n    }\n    ```", "```js\n    let burger = new Food('burger', 1000, 9);\n    ```", "```js\n    console.log(burger.description());\n    ```", "```js\n    class Food {\n    }\n    ```", "```js\n    console.log(typeof Food) // should print out 'function'\n    ```", "```js\n    class Food {\n       constructor(name, calories, cost) {\n          this.name = name;\n          this.calories = calories;\n          this.cost = cost;\n       }\n    }\n    ```", "```js\n    class Food {\n       constructor(name, calories, cost) {\n          this.name = name;\n          this.calories = calories;\n          this.cost = cost;\n       }\n       description() {\n          return this.name + ' calories: ' + this.calories;\n       }\n    }\n    ```", "```js\n    Food('burger', 1000, 9);\n    // TypeError: Class constructor Food2 cannot be invoked without 'new'\n    ```", "```js\n    let friedChicken = new Food('fried chicken', 520, 5);\n    ```", "```js\n    console.log(friedChicken.description());\n    ```", "```js\n    class Food {\n       constructor(name, calories, cost) {\n          this.name = name;\n          this.calories = calories;\n          this.cost = cost;\n       }\n       static getCalories(food) {\n          return food.calories\n       }\n       description() {\n          return this.name + ' calories: ' + this.calories;\n       }\n    }\n    ```", "```js\n    console.log(Food.getCalories(friedChicken)); /// 520\n    ```", "```js\n    class MySimpleCache {\n    constructor() {\n       // Declare your cache internal properties here\n       this.cacheItems = {};\n    }\n    }\n    ```", "```js\n    addItem(key, value) {\n    // Add an item with the key\n    this.cacheItems[key] = value;\n      }\n    ```", "```js\n    updateItem(key, value) {\n    // Update a value use the key\n    this.addItem(key, value);\n    }\n    ```", "```js\n    removeItem(key) {\n    this.updateItem(key, undefined);\n    }\n    ```", "```js\n    function testMyCache() {\n       const cache = new MySimpleCache ();\n       cache.addItem('user1', { name: 'user1', dob: 'Jan 1' });\n       cache.addItem('user2', { name: 'user2', dob: 'Jul 21' });\n       cache.updateItem('user1', { name: 'user1', dob: 'Jan 2' });\n       cache.addItem('user3', { name: 'user3', dob: 'Feb 1' });\n       cache.removeItem('user3');\n       assert(cache.getItem('user1').dob === 'Jan 2');\n       assert(cache.getItem('user2').dob === 'Jul 21');\n       assert(cache.getItem('user3') === undefined);\n       console.log ('=====TEST PASSED=====')\n    }\n    testMyCache();\n    ```", "```js\nclass MySubClass extends ParentClass {\n}\n```", "```js\n    class Vehicle {\n       constructor(name, speed, cost) {\n          this.name = name;\n          this.speed = speed;\n          this.cost = cost;\n       }\n       start() {\n          console.log('Starting vehicle, ' + this.name + ' at ' + this.speed + 'km/h');\n       }\n       buy() {\n          console.log('Buying for ' + this.cost);\n       }\n    }\n    ```", "```js\n    const vehicle = new Vehicle('bicycle', 15, 100);\n    vehicle.start();\n    vehicle.buy();\n    ```", "```js\n    class Car extends Vehicle {}\n    class Plane extends Vehicle {}\n    class Rocket extends Vehicle {}\n    ```", "```js\n    class Car extends Vehicle {\n       start() {\n          console.log('Driving car, at ' + this.speed + 'km/h');\n       }\n    }\n    class Plane extends Vehicle {\n       start() {\n          console.log('Flying plane, at ' + this.speed + 'km/h');\n       }\n    }\n    class Rocket extends Vehicle {\n       start() {\n          console.log('Flying rocket to the moon, at ' + this.speed + 'km/h');\n       }\n    }\n    ```", "```js\n    const car = new Car('Toyota Corolla', 120, 5000);\n    const plane = new Plane('Boeing 737', 1000, 26000000);\n    const rocket = new Rocket('Saturn V', 9920, 6000000000);\n    ```", "```js\n    car.start();\n    plane.start();\n    rocket.start();\n    ```", "```js\n    class Car extends Vehicle {\n       constructor(name, speed, cost, tankSize) {\n          super(name, speed, cost);\n          this.tankSize = tankSize;\n       }\n       start() {\n          console.log('Driving car, at ' + this.speed + 'km/h');\n       }\n    }\n    ```", "```js\n    const car2 = new Car('Toyota Corolla 2', 120, 5000, 2000);\n    console.log(car2.tankSize); // 2000\n    ```", "```js\n    function printStat() {\n       console.log('The car has a tanksize of ', this.tankSize);\n    }\n    ```", "```js\n    class Car extends Vehicle {\n       constructor(name, speed, cost, tankSize) {\n          super(name, speed, cost);\n          this.tankSize = tankSize;\n       }\n       start() {\n          console.log('Driving car, at ' + this.speed + 'km/h');\n          printStat();\n       }\n    }\n    ```", "```js\n    const car = new Car('Toyota Corolla', 120, 5000, 2000);\n    car.start();\n    ```", "```js\n    start() {\n          console.log('Driving car, at ' + this.speed + 'km/h');\n          printStat.bind(this)();\n       }\n    ```", "```js\nconst singers = [{ name: 'Miku', age: 16}, { name: 'Kaito', age: 20 }];\n```", "```js\nconst names = singers.map((singer) => singer.name);\n```", "```js\nconst singers = [{ name: 'Miku', age: 16}, { name: 'Kaito', age: 20 }];\nsingers.forEach((singer) => {\n   console.log(singer.name);\n})\n```", "```js\nconst singers = [{ name: 'Miku', age: 16}, { name: 'Kaito', age: 20 }];\nconst miku = singers.find((singer) => singer.name === 'Miku');\n```", "```js\nconst singers = [{ name: 'Miku', age: 16}, { name: 'Kaito', age: 20 }];\nconst youngSingers = singers.filter((singer) => singer.age < 30);\n```", "```js\nconst programmingLanguages = ['C', 'Java', 'Python'];\nconst myMappedArray = programmingLanguages.map((language) => {\n   return 'I know ' + language;\n});\n```", "```js\nfoods.forEach(eat_food);\n```", "```js\n    const foods = ['sushi', 'tofu', 'fried chicken'];\n    ```", "```js\n    foods.join(', ');\n    ```", "```js\n    function eat_food(food) {\n       console.log('I am eating ' + food);\n    }\n    ```", "```js\n    const foods = ['sushi', 'tofu', 'fried chicken'];\n    function eat_food(food) {\n       console.log('I am eating ' + food);\n    }\n    for(let i = 0; i < foods.length; i++) {\n       eat_food(foods[i]);\n    }\n    ```", "```js\n    foods.forEach(eat_food);\n    ```", "```js\n    const nutrition = [100, 50, 400]\n    ```", "```js\n    const foodInfo = foods.map((food, index) => {\n       return {\n          name: food,\n          calories: nutrition[index]\n       };\n    });\n    ```", "```js\n    console.log(foodInfo);\n    ```", "```js\n    let profiles = [\n       'Michael Scott',\n       'Jim Halpert',\n       'Dwight Shrute',\n       'Random User',\n       'Hatsune Miku',\n       'Rin Kagamine'\n    ];\n    ```", "```js\n    let hasJim = profiles.includes('Jim Halpert');\n    console.log(hasJim);\n    ```", "```js\n    const profiles = [\n       { name: 'Michael Scott', age: 42 },\n       { name: 'Jim Halpert', age: 27},\n       { name: 'Dwight Shrute', age: 37 },\n       { name: 'Random User', age: 10 },\n       { name: 'Hatsune Miku', age: 16 },\n       { name: 'Rin Kagamine', age: 14 }\n    ]\n    ```", "```js\n    hasJim = profiles.includes({ name: 'Jim Halpert', age: 27});\n    console.log(hasJim);\n    ```", "```js\n    hasJim = !!profiles.find((profile) => {\n       return profile.name === 'Jim Halpert';\n    }).length;\n    console.log(hasJim);\n    ```", "```js\n    const adults = profiles.filter((profile) => {\n       return profile.age > 18;\n    });\n    console.log(adults);\n    ```", "```js\nfunction compareNumber(a, b) {\n   return a - b;\n}\n```", "```js\nfunction compareAge(a, b) {\n   return a.age - b.age;\n}\n```", "```js\n    const numbers = [ 20, 1, 3, 55, 100, 2];\n    ```", "```js\n    numbers.sort();\n    console.log(numbers);\n    ```", "```js\n    function compareNumber(a, b) {\n       return a - b;\n    }\n    ```", "```js\n    numbers.sort(compareNumber);\n    console.log(numbers);\n    ```", "```js\n    const profiles = [\n       { name: 'Michael Scott', age: 42 },\n       { name: 'Jim Halpert', age: 27},\n       { name: 'Dwight Shrute', age: 37 },\n       { name: 'Random User', age: 10 },\n       { name: 'Hatsune Miku', age: 16 },\n       { name: 'Rin Kagamine', age: 14 }\n    ]\n    ```", "```js\n    profiles.sort();\n    console.log(profiles);\n    ```", "```js\n    function compareAge(a, b) {\n       return a.age - b.age;\n    }\n    ```", "```js\n    profiles.sort(compareAge);\n    console.log(profiles);\n    ```", "```js\nArray.reduce((previousValue, currentValue) => {\n   // reducer\n}, initialValue);\n```", "```js\n    const cart = [];\n    ```", "```js\n    cart.push({ name: 'CD', price: 12.00, amount: 2 });\n    cart.push({ name: 'Book', price: 45.90, amount: 1 });\n    cart.push({ name: 'Headphones', price: 5.99, amount: 3 });\n    cart.push({ name: 'Coffee', price: 12.00, amount: 2 });\n    cart.push({ name: 'Mug', price: 15.45, amount: 1 });\n    cart.push({ name: 'Sugar', price: 5.00, amount: 1 });\n    ```", "```js\n    let total = 0;\n    cart.forEach((item) => {\n       total += item.price * item.amount;\n    });\n    console.log('Total amount: ' + total);\n    ```", "```js\n    function priceReducer (accumulator, currentValue) {\n       return accumulator += currentValue.price * currentValue.amount;\n    }\n    ```", "```js\n    total = cart.reduce(priceReducer, 0);\n    console.log('Total amount: ' + total);\n    ```", "```js\n    const map = new Map()\n    ```", "```js\n    const key1 = 'key1';\n    const key2 = { name: 'John', age: 18 };\n    const key3 = Map;\n    ```", "```js\n    map.set(key1, 'value for key1');\n    map.set(key2, 'value for key2');\n    map.set(key3, 'value for key3');\n    ```", "```js\n    console.log(map.get(key1));\n    console.log(map.get(key2));\n    console.log(map.get(key3));\n    ```", "```js\n    console.log(map.get({ name: 'John', age: 18 }));\n    ```", "```js\n    map.forEach((value, key) => {\n       console.log('the value for key: ' + key + ' is ' + value);\n    });\n    ```", "```js\n    console.log(map.keys());\n    console.log(map.values());\n    ```", "```js\n    console.log(map.has('non exist')); // false\n    ```", "```js\n    const planets = [\n       'Mercury',\n       'Uranus',\n       'Mars',\n       'Venus',\n       'Neptune',\n       'Saturn',\n       'Mars',\n       'Jupiter',\n       'Earth',\n       'Saturn'\n    ]\n    ```", "```js\n    const planetSet = new Set(planets);\n    ```", "```js\n    console.log(planetSet.values());\n    ```", "```js\n    planetSet.add('Venus');\n    planetSet.add('Kepler-440b');\n    ```", "```js\n    console.log(planetSet.size);\n    ```", "```js\n    planetSet.clear();\n    console.log(planetSet);\n    ```", "```js\nconst currentDate = new Date();\n```", "```js\nconst myString = 'this is a string';\n```", "```js\nconst random = Math.random();\n```", "```js\n    let planet = 'Earth';\n    ```", "```js\n    let sentence = `We are on the planet ${planet}`;\n    ```", "```js\n    console.log(sentence.split(' '));\n    ```", "```js\n    sentence = sentence.replace('Earth', 'Venus');\n    console.log(sentence);\n    ```", "```js\n    console.log(sentence.includes('Mars'));\n    ```", "```js\n    sentence.toUpperCase();\n    sentence.toLowerCase();\n    ```", "```js\n    sentence.charAt(0); // returns W\n    ```", "```js\n    sentence.length;\n    ```", "```js\n    function generateRandomString(length) {\n\n    }\n    ```", "```js\n    function generateRandomNumber(min, max) {\n       return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    ```", "```js\n    function generateRandomString(length) {\n       const characters = [];\n       const characterSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n       for (let i = 0; i < length; i++) {\n          characters.push(characterSet.charAt(generateRandomNumber(0, characterSet.length)));\n       }\n       return characters.join(');\n    }\n    ```", "```js\n    console.log(generateRandomString(16));\n    ```", "```js\n    function circleArea(radius) {\n       return Math.pow(radius, 2) * Math.PI;\n    }\n    ```", "```js\n    const now = new Date();\n    console.log(now);\n    ```", "```js\n    const past = new Date('August 31, 2007 00:00:00');\n    ```", "```js\n    console.log(past.getFullYear());\n    console.log(past.getMonth());\n    console.log(past.getDate());\n    ```", "```js\n    console.log(past.toString());\n    ```", "```js\n    console.log(Math.floor(Date.now() / 1000));\n    ```", "```js\n    let symbol1 = Symbol();\n    let symbol2 = Symbol('symbol');\n    ```", "```js\n    console.log(symbol1 === symbol2);\n    console.log(symbol1 === Symbol('symbol'));\n    ```", "```js\n    const testObj = {};\n    testObj.name = 'test object';\n    testObj.included = 'this will be included';\n    ```", "```js\n    const symbolKey = Symbol();\n    testObj[symbolKey] = 'this will be hidden';\n    ```", "```js\n    console.log(Object.keys(testObj));\n    ```", "```js\n    console.log(testObj[Symbol()]); // Will return undefined\n    console.log(testObj[symbolKey]); // Will return our hidden property\n    ```", "```js\n    const anotherSymbolKey = Symbol.for('key');\n    const copyOfAnotherSymbol = Symbol.for('key');\n    ```", "```js\n    testObj[anotherSymbolKey] = 'another key';\n    console.log(testObj[copyOfAnotherSymbol]);\n    ```", "```js\n    function range(max) {\n       return {\n          *[Symbol.iterator]() {\n            yield 1;\n          }\n       };\n    }\n    ```", "```js\n    for (let value of range(10)) {\n       console.log(value);\n    }\n    ```", "```js\n    function range(max) {\n       return {\n          *[Symbol.iterator]() {\n            for (let i = 0; i < max; i++) {\n               yield i;\n            }\n          }\n       };\n    }\n    ```", "```js\n    function* gen() {\n       yield 1;\n    }\n    ```", "```js\n    const generator = gen();\n    ```", "```js\n    console.log(generator.next());\n    console.log(generator.next());\n    console.log(generator.next());\n    ```", "```js\nconst handlers = {\n   set: (object, prop, value) => {\n      console.log('setting ' + prop);\n   }\n}\nconst proxiesValue = new Proxy({}, handlers);\nproxiesValue.prop1 = 'hi';\n```", "```js\n    const simpleObject = {};\n    ```", "```js\n    const handlers = {\n    }\n    ```", "```js\n    const proxiesValue = new Proxy(simpleObject, handlers);\n    ```", "```js\n    const handlers = {\n       get: (object, prop) => {\n          return 'values are private';\n       }\n    }\n    ```", "```js\n    proxiedValue.key1 = 'value1';\n    console.log(proxiedValue.key1);\n    console.log(proxiedValue.keyDoesntExist);\n    ```", "```js\n    set: (object, prop, value) => {\n          if (prop === 'id') {\n            if (!Number.isInteger(value)) {\n               throw new TypeError('The id needs to be an integer');\n            }\n          }\n       }\n    ```", "```js\n    proxiedValue.id = 'not an id'\n    ```", "```js\nfunction appendPrefix(prefix, input) {\n   const result = [];\n   for (var i = 0; i < input.length; i++) {\n      result.push(prefix + input[i]);\n   }\n   return result;\n}\n```", "```js\nappendPrefix('Hi! ', ['Miku', 'Rin', 'Len']);\n```", "```js\nfunction appendPrefix(prefix, input) {\n   return input.map((inputItem) => {\n      return prefix + inputItem;\n   });\n}\n```", "```js\nappendPrefix('Hi! ', ['Miku', 'Rin', 'Len']);\n```"]