["```js\nlet basket = [];\nfor (let i = 0; i < 3; i++) {\n  basket.push(\n    makeEgg()\n  );\n}\n```", "```js\nfunction getUnpaidInvoices(invoiceProvider) {\n  const unpaidInvoices = [];\n  const invoices = invoiceProvider.getInvoices();\n  for (var i = 0; i < invoices.length; i++) {\n    if (!invoices[i].isPaid) {\n      unpaidInvoices.push(invoices[i]);\n    }\n  }\n  return unpaidInvoices;\n}\n```", "```js\nfunction getUnpaidInvoices(invoiceProvider) {\n  return invoiceProvider.getInvoices().filter(invoice => {\n    return !invoice.isPaid;\n  });\n}\n```", "```js\nif (feature.isEnabled) {\n  // Do the task.\n}\n```", "```js\n// A feature that is disabled:\nfeature.flags; // => [Feature.DISABLED_FLAG]\n```", "```js\nlet featureIsEnabled = true;\n\nfor (let i = 0; i < feature.flags.length; i++) {\n  if (feature.flags[i] === Feature.DISABLED_FLAG) {\n    featureIsEnabled = false;\n    break;\n  }\n}\n\nif (!featureIsEnabled) {\n  for (let i = 0; i < feature.enabledTimeSlots.length; i++) {\n    if (feature.enabledTimeSlots[i].isNow()) {\n      featureIsEnabled = true;\n      break;\n    }\n  }\n}\n\nif (featureIsEnabled) {\n  // Do the task.\n}\n```", "```js\nclass Feature {\n  // (Other methods of the Feature class here,..)\n\n  _hasDisabledFlag() {\n    return this.flags.includes(Feature.DISABLED_FLAG);\n  }\n\n  _isEnabledTimeSlotNow() {\n    return this.enabledTimeSlots.filter(ts => ts.isNow()).length;\n  }\n\n  isEnabled() {\n    return !this._isDisabledFlag() && this._isEnabledTimeSlotNow();\n  }\n}\n```", "```js\nif (feature.isEnabled()) {\n  // Do the task.\n}\n```", "```js\nsomeFunction();\n(function(){})();\nsomeObject.someMethod();\n[function(){}][0]();\n```", "```js\nfunction MyConstructor() {}\n\n// Both equivalent:\nnew MyConstructor();\nnew MyConstructor;\n```", "```js\n1();     // ! TypeError: 1 is not a function\n[]();    // ! TypeError: [] is not a function\n'wat'(); // ! TypeError: \"wat\" is not a function\n```", "```js\nconst person = {\n  set name(name) {\n    console.log('You are trying to set the name to', name);\n  }\n};\n\nperson.name = 'Leo';\n// Logs: \"You are trying to set the name to Leo\"\n```", "```js\nfunction sayHiToMe(name) {\n\n if (name) {\n   return `Hi ${name}`;\n }\n\n // In the case of a truthy `name` this code is never arrived at\n // because `return` exists on a previous line:\n throw 'You do not have a name! :(';\n\n}\n\nsayHiToMe('James'); // => \"Hi James\"\n```", "```js\nfunction findHighestMountain(mountains) {\n\n  if (!mountains || !mountains.length) {\n    return null;\n  }\n\n  if (mountains.length === 1) {\n    return mountains[0];\n  }\n\n  // Do the actual work of finding the \n  // highest mountain here...\n}\n```", "```js\nfunction* makeSomeNumbers() {\n  yield 645;\n  yield 422;\n  yield 789;\n}\n\nconst iterable = makeSomeNumbers();\niterable.next(); // => {value: 645, done: false}\niterable.next(); // => {value: 422, done: false}\niterable.next(); // => {value: 789, done: false}\n```", "```js\nfunction* myGenerator() {\n  console.log('Chunk A');\n  yield;\n  console.log('Chunk B');\n  yield;\n}\n\nconst iterable = myGenerator();\n\nconsole.log('Calling first time');\niterable.next();\nconsole.log('Done calling first time');\n\nconsole.log('Calling second time');\niterable.next();\nconsole.log('Done calling second time');\n```", "```js\nfunction* createAdder() {\n  let n = 0;\n  while (true) n += yield n;\n}\n\nconst adder = createAdder();\n\nadder.next(); // Initialize (kick things off!)\n\nadder.next(100).value; // => 100\nadder.next(100).value; // => 200\nadder.next(150).value; // => 350\n```", "```js\nfor (let i = 0; i < array.length; i++) {\n  if (myCriteriaIsMet(array[i]) {\n    happyPath();\n    break;\n  }\n}\n```", "```js\nswitch (2) {\n  case 1: console.log(1);\n  case 2: console.log(2);\n  case 3: console.log(3);\n  case 4: console.log(4); break;\n  case 5: console.log(5);\n}\n\n// Logs: 2, 3, 4\n```", "```js\nouterLoop: for (let obj in objects) {\n  for (let key in obj) {\n    if (/* some condition */) {\n      break outerLoop;\n    }\n  }\n}\n```", "```js\nspecificWork: {\n  doSomeSpecificWork();\n  if (weAreFinished) {\n    break specificWork;\n      // immediately exits the `specificWork: {...}` block\n  }\n  doOtherWork();\n}\n```", "```js\nconst numbers = [1, 2, 3];\n\nfor (const n of numbers) {\n  if (n === 2) continue;\n  console.log(n);\n}\n\n// Logs: 1, 3\n```", "```js\nobjectsIteration: for (let obj in objects) {\n  for (let key in obj) {\n    if (/* some condition */) {\n      continue objectsIteration;\n    }\n  }\n}\n```", "```js\nfunction nameToUpperCase(name) {\n  if (typeof name !== 'string') {\n    throw new TypeError('Name should be a string');\n  }\n  return name.toUpperCase();\n}\n```", "```js\nlet theUpperCaseName;\ntry {\n  theUpperCaseName = nameToUpperCase(null);\n} catch(e) {\n  e.message; // => \"Name should be a string\"\n}\n```", "```js\nclass NetworkError extends Error {}\n\nasync function makeDataRequest() {\n  try {\n    const response = await fetch('/data');\n  } catch(e) {\n    throw NetworkError('Cannot fetch data');\n  }\n  // ... (process response) ...\n}\n```", "```js\ntry {\n  throw new Error;\n} catch(e) {\n  e.stack; // => \"Error\\n at filename.js:2:9\"\n}\n```", "```js\nif (ConditionExpression) Statement\n```", "```js\nif (true) {}\nif (1 || 2 || 3) {}\nif ([1, 2, 3].filter(n => n > 2).length > 0) {}\n```", "```js\n// These are equivalent\nif (true) { doBaz(); }\nif (true) doBaz();\n```", "```js\nif (false) {}\nif (null) {}\nif (undefined) {}\nif (0n) {}\nif (0) {}\nif ('') {}\nif (NaN) {}\n```", "```js\nif (isLegalDrinkingAge) drink(); else leave();\n\n// Equivalent, with Blocks:\nif (isLegalDrinkingAge) {\n  drink();\n} else {\n  leave();\n}\n```", "```js\nif (number > 5) {\n  // For numbers larger than five\n} else if (number < 3) {\n  // For numbers less than three\n} else {\n  // For everything else\n}\n```", "```js\nif (number > 5) {\n  // For numbers larger than five\n} else {\n  if (number < 3) {\n    // For numbers less than three\n  } else {\n    // For everything else\n  }\n}\n```", "```js\nfor (\n  InitializerExpression;\n  ConditionExpression;\n  UpdateExpression\n) IterationBody\n```", "```js\nfor (let i = 0; i < array.length; i++) {\n  array[i]; // => (Each `array` item)\n}\n```", "```js\n[r, g, b, a, r, g, b, a, ...]\n```", "```js\nconst pixelData = canvas.getContext('2d').getImageData(0, 0, 100, 100).data;\n\nfor (let i = 0; i < pixelData.length; i += 4) {\n  let red = pixelData[i];\n  let blue = pixelData[i + 1];\n  let green = pixelData[i + 2];\n  let alpha = pixelData[i + 3];\n  // (do something with RGBA)\n}\n```", "```js\nvar copy = [];\nfor (\n  let i = 0;\n  i < array.length;\n  copy[i] = array[i++]\n); \n```", "```js\nfor (\n  let i = 0;\n  i < array.length;\n  i++\n) {\n  copy[i] = array[i];\n}\n```", "```js\nfor (LeftSideAssignment in Object) IterationBody\n```", "```js\nconst city = { name: 'London', population: 8136000 };\nfor (const key in city) {\n  console.log(key);\n}\n// Logs: \"name\", \"population\"\n```", "```js\nfor (let key in obj) {}\nfor (var key in obj) {}\nfor (const key in obj) {}\nfor (key in obj) {}\n```", "```js\nlet key;\nfor (key in obj) {}\n```", "```js\nlet foo = {};\nfor (foo.key in obj) {}\n```", "```js\nconst objectA = { isFromObjectA: true };\nconst objectB = { isFromObjectB: true };\n\nObject.setPrototypeOf(objectB, objectA);\n\nfor (const prop in objectB) {\n console.log(prop);\n}\n\n// Logs: \"isFromObjectB\", \"isFromObjectA\"\n```", "```js\nfor (const key in obj) {\n  if (obj.hasOwnProperty(key)) {\n    // `key` is a non-inherited (direct) property of `obj`\n  }\n}\n```", "```js\nfor (LeftSideAssignment in IterableObject) IterationBody\n```", "```js\nconst array = [1, 2, 3];\n\nfor (const i of array) {\n  console.log(i);\n}\n\n// Logs: 1, 2, 3\n```", "```js\nwhile (ConditionExpression) IterationBody\n```", "```js\nconst array = ['a', 'b', 'c'];\n\nlet i = -1;\nwhile (++i < array.length) {\n  console.log(array[i]);\n}\n\n// Logs: 'a', 'b', 'c'\n```", "```js\nwhile (true) {\n  if (/* some custom condition */) {\n    break;\n  }\n}\n```", "```js\nfunction *loopingAlphabet() {\n let i = 0;\n while (true) {\n   yield String.fromCharCode(\n     97 + (i >= 26 ? i = 0 : i++)\n   );\n }\n}\n\nconst alphabet = loopingAlphabet();\n\nalphabet.next(); // => { value: \"a\" }\nalphabet.next(); // => { value: \"b\" }\nalphabet.next(); // => { value: \"c\" }\n// ...\nalphabet.next(); // => { value: \"z\" }\nalphabet.next(); // => { value: \"a\" }\nalphabet.next(); // => { value: \"b\" }\n// ...\n```", "```js\ndo IterationBody while (ConditionExpression)\n```", "```js\ndo {\n  // Do something with `element`\n} while (element = element.parentNode);\n```", "```js\nswitch (SwitchExpression) SwitchBody\n```", "```js\ncase CaseExpression:\n  [other JavaScript statements or additional clauses]\n```", "```js\nfunction generateWelcomeMessage(language) {\n\n  let welcomeMessage;\n\n  switch (language) {\n    case 'DE':\n      welcomeMessage = 'Willkommen!';\n      break;\n    case 'FR':\n      welcomeMessage = 'Bienvenue!';\n      break;\n    default:\n      welcomeMessage = 'Welcome!';\n  }\n\n  return welcomeMessage;\n}\n\ngenerateWelcomeMessage('DE'); // => \"Willkommen!\"\ngenerateWelcomeMessage('FR'); // => \"Bienvenue!\"\ngenerateWelcomeMessage('EN'); // => \"Welcome!\"\ngenerateWelcomeMessage(null); // => \"Welcome!\"\n```", "```js\nswitch (language) {\n\n  case 'German':\n  case 'Deutsche':\n  case 'DE':\n    welcomeMessage = 'Willkommen!';\n    break;\n\n  case 'French':\n  case: 'Francais':\n  case 'FR':\n    welcomeMessage = 'Bienvenue!';\n    break;\n\n  default:\n    welcomeMessage = 'Welcome!';\n}\n```", "```js\nfunction generateWelcomeMessage(language) {\n  switch (language) {\n    case 'DE':\n      return 'Willkommen!';\n    case 'FR':\n      return 'Bienvenue!';\n    default:\n      return 'Welcome!';\n  }\n}\n```", "```js\nswitch (speed) {\n  case 'slow': {\n    console.log('Initiating slow speed');\n    car.changeSpeedTo(speed);\n    car.enableUrbanCollisionControl();\n  }\n  case 'fast': {\n    console.log('Initiating fast speed');\n    car.changeSpeedTo(speed);\n    car.enableSpeedLimitWarnings();\n    car.enableCruiseControlOption();\n  }\n  case 'regular':\n  default: {\n    console.log('Initiating regular speed');\n    car.changeSpeedTo(speed);\n  }\n}\n```", "```js\nswitch (month) {\n  case 'December':\n  case 'January':\n  case 'February': {\n    const message = 'In the UK, Spring is coming soon!';\n    // ...\n  }\n  //...\n}\n```", "```js\nswitch (true) {\n  case user.role === 'admin' || user.role === 'root': {\n    // ...\n    break;\n  }\n  case user.role === 'member' && user.isActive: {\n    // ...\n    break;\n  }\n  case user.role === 'member' && user.isRecentlyInactive: {\n    // ...\n    break;\n  }\n}\n```", "```js\nif (a) {\n alpha();\n if (b) bravo();\n if (c) charlie();\n}\nif (d) delta();\n```", "```js\nfunction getIDsFromLicenses(licenses) {\n  const ids = [];\n  for (let i = 0; i < licenses.length; i++) {\n    let license = licenses[i];\n    if (license.id != null) {\n      if (license.id.indexOf('c') === 0) {\n        let nID = Number(license.id.slice(1));\n        if (nID >= 1000000) {\n          ids.push({ type: 'car', digits: nID });\n        } else {\n          ids.push({ type: 'car_old', digits: nID });\n        }\n      } else if (license.id.indexOf('h') === 0) {\n        ids.push({\n          type: 'hgv',\n          digits: Number(license.id.slice(1))\n        });\n      } else if (license.id.indexOf('m') === 0) {\n        ids.push({\n          type: 'motorcycle',\n          digits: Number(license.id.slice(1))\n        });\n      }\n    }\n  } \n  return ids;\n}\n```", "```js\ngetIDsFromLicenses([\n    { name: 'Jon Smith', id: 'c32948' },\n    { name: 'Marsha Brown' },\n    { name: 'Leah Oak', id: 'h109' },\n    { name: 'Jim Royle', id: 'c29283928' }\n]);\n// Outputs:\n[\n  {type: \"car_old\", digits: 32948}\n  {type: \"hgv\", digits: 109}\n  {type: \"car\", digits: 29283928}\n]\n```", "```js\n[INPUT LICENSES] ==> (DERIVATION LOGIC) ==> [OUTPUT ID TYPES AND DIGITS]\n```", "```js\nids = licenses.map(license => license.id)\n```", "```js\nids = ids.filter(id => id != null)\n```", "```js\nids = ids.filter(Boolean)\n```", "```js\nids = ids.map(id => getIDFields(\n  id.charAt(0),\n  Number(id.slice(1))\n));\n```", "```js\nfunction getIDFields(idType, digits) {\n  switch (idType) {\n    case 'c': return {\n      type: digits >= 1000000 ? 'car' : 'car_old',\n      digits\n    };\n    case 'h': return { type: 'hgv', digits };\n    case 'm': return { type: 'motorcycle', digits };\n  }\n}\n```", "```js\ngetIDFields('c', 1000); // => { type: \"car_old\", digits: 1000 }\ngetIDFields('c', 2000000); // => { type: \"car\", digits: 1000 }\ngetIDFields('h', 1000); // => { type: \"hgv\", digits: 1000 }\ngetIDFields('i', 1000); // => { type: \"motorcycle\", digits: 1000 }\n```", "```js\nfunction getIDsFromLicenses(licenses) {\n  return licenses\n    .map(license => license.id)\n    .filter(Boolean)\n    .map(id => getIDFields(\n      id.charAt(0),\n      Number(id.slice(1))\n    ))\n}\n```", "```js\nconst someValue = getSomeValue();\ndoSomethingWithTheValue(someValue);\n```", "```js\nfetchSomeData();\nprocessFetchedData();\n```", "```js\nalert('Hello!');\nconsole.log('The alert has been dismissed by the user');\n```", "```js\nfunction requestData(path, callback) {\n  // (Implementation of requestData)\n}\n```", "```js\nrequestData('/data/123', (response) => { /* ... */ });\n```", "```js\nfunction onResponse(response) {\n  // Do something with the response...\n}\n\nrequestData('/data/123', onResponse);\n```", "```js\ncreateDropdownComponent({\n  onOpen() {},\n  onSelect() {},\n  onClose() {},\n  onHover() {} // etc.\n});\n```", "```js\nfs.readFile('/path/to/file', (error, data) => {\n  if (error) {\n    // Handle the error!\n  } else {\n    // Handle the data! (No error has occurred!)\n  } \n});\n```", "```js\nrequestData('/data/current-user', (userData) => {\n  if (userData.preferences.twitterEnabled) {\n    requestData(userData.twitterFeedURL, (twitterFeedData) => {\n      renderTwitterFeed(twitterFeedData, {\n        onRendered() {\n          logEvent('twitterFeedRender', { userId: userData.id });\n        }\n      });\n    });\n  }\n});\n```", "```js\nrequestData('/data/current-user', (userData) => {\n  if (userData.preferences.twitterEnabled) {\n    renderTwitterForUser(userData);\n  }\n});\n```", "```js\n{\n  \"click\": [Function, Function, Function],\n  \"mouseover\": [Function, Function],\n  \"mouseout\": [Function]\n}\n```", "```js\ndocument,body.addEventListener('mousemove', e => {\n  e; // => the Event object\n});\n```", "```js\nconst server = http.createServer(...);\n\nfunction onConnect(req, cltSocket, head) {\n  // Connect to an origin server...\n}\n\n// Subscribe\nserver.on('connect', onConnect);\n\n// Unsubscribe\nserver.off('connect', onConnect);\n```", "```js\nconst dropdown = new DropDown();\ndropdown.on('select', () => { /*...*/ });\ndropdown.on('deselect', () => { /*...*/ });\ndropdown.on('hover', () => { /*...*/ });\n```", "```js\n// Less transparent & more burdensome:\ndropdown.on('action', event => {\n  switch (event.action) {\n    case 'select': /*...*/; break;\n    case 'deselect': /*...*/; break;\n    // ...\n  }\n});\n```", "```js\nconst answerToEverything = new Promise((resolve, reject) => {\n   setTimeout(() => {\n     resolve(42);\n   }, 1000);\n});\n```", "```js\nanswerToEverything.then(answer => {\n  answer; // => 42\n});\n```", "```js\nconst promiseOfData = fetch('/some/data?foo=bar');\n```", "```js\nconst promiseOfData = fetch('/some/data');\n\npromiseOfData.then(\n  response => {\n    response; // The \"fulfilled\" Response\n  },\n  error => {\n    error; // The \"rejected\" Error \n  }\n);\n```", "```js\nfetch('/data/users')\n  .then(response => response.json())\n  .then(jsonDataOfUsers => {\n    jsonDataOfUsers; // the JSON data that we got from response.json()\n  });\n```", "```js\nfetch('/data/users')\n  .then(response => response.json())\n  .then(users => users.map(user => user.forename))\n  .then(userForenames => userForenames.sort());\n```", "```js\nconst promiseA = fetch('/data/users');\nconst promiseB = promiseA.then(response => response.json());\nconst promiseC = promiseB.then(users => users.map(user => user.forename))\nconst promiseD = promiseC.then(userForenames => userForenames.sort());\n\npromiseA === promiseB; // => false\npromiseB === promiseC; // => false\npromiseC === promiseD; // => false\n```", "```js\nconst users = fetch('/data/users').then(r => r.json());\nconst forenames = users.then(users => users.map(user => user.forename));\nconst surnames = users.then(users => users.map(user => user.surname));\n```", "```js\nfunction createForenamesComponent(forenamesPromise) {\n\n  const div = document.createElement('div');\n\n  function render(forenames) {\n    div.textContent = forenames ? forenames.join(', ') : 'Loading...';\n  }\n\n  render(null); // Initial render\n\n  forenamesPromise.then(forenames => {\n    // When we receive the forenames we want to render them:\n    render(forenames);\n  });\n\n  return div; \n}\n```", "```js\nuserInfoLoader.init();\n\nappStartup().then(() => {\n  const userID = userInfoLoader.data.id;\n  const userName = userInfoLoader.data.name;\n  renderApplication(userID, userName);\n});\n```", "```js\nuserInfoLoader.init()\n  .then(() => appStartup())\n  .then(() => {\n    const userID = userInfoLoader.data.id;\n    const userName = userInfoLoader.data.name;\n    renderApplication(userID, userName);\n  });\n```", "```js\nasync function getNumber() {\n  return 42;\n}\n```", "```js\ngetNumber() instanceof Promise; // => true\n```", "```js\ngetNumber().then(number => {\n  number; // => 42\n});\n```", "```js\nawait someAsyncFunction();\n```", "```js\nconst n = await new Promise(fulfill => fulfill(123));\nn; // => 123\n```", "```js\nasync function setupFeed() {\n  const response = await fetch('/data');\n  const json = await response.json();\n  console.log(json);\n}\n```", "```js\nfunction setupFeed() {\n  fetch('/data').then(response => {\n    return response.json()\n  }).then(json => {\n    console.log(json);\n  });\n}\n```", "```js\nconst allData = [\n  fetch('/data/1').then(r => r.json()),\n  fetch('/data/2').then(r => r.json()),\n  fetch('/data/3').then(r => r.json())\n];\n\nfor await (const data of allData) {\n  console.log(data);\n}\n\n// Logs data from /data/1, /data/2 and /data/3\n```"]