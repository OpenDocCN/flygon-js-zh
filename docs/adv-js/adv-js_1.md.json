["```js\nvar example = 5;\nfunction test() {\n  var testVariable = 10;\n  console.log( example ); // Expect output: 5\n  console.log( testVariable ); // Expect output: 10\n}\ntest();\nconsole.log( testVariable ); // Expect reference error\n```", "```js\nexample = 5; // Assign value\nconsole.log( example ); // Expect output: 5\nvar example; // Declare variable\n```", "```js\n// Top level scope\nfunction scopeExample() {\n  // Scope block 1\n  for ( let i = 0; i < 10; i++ ){ /* Scope block 2 */ }\n  if ( true ) { /* Scope block 3 */ } else {  /* Scope block 4 */ }\n  // Braces without keywords create scope blocks\n  { /* Scope block 5 */ } \n  // Scope block 1\n}\n// Top level scope\n```", "```js\n// console.log( example ); // Would throw ReferenceError\nlet example;\nconsole.log( example ); // Expected output: undefined\nexample = 5;\nconsole.log( example ); // Expected output: 5\n```", "```js\nfunction fn1(){\n console.log('Scope 1');\n let scope = 5;\n console.log(scope);\n {\n   console.log('Scope 2');\n   let scope = 'different scope';\n   console.log(scope);\n }\n  {\n   console.log('Scope 3');\n   let scope = 'a third scope';\n   console.log(scope);\n }\n}\nfn1();\n```", "```js\n// Referenced before declaration\nconsole.log( example ); // Expect output: undefined\nvar example = 'example';\n```", "```js\n// Declared and assigned\nvar example = { prop1: 'test' };\nconsole.log( 'example:', example );\n// Expect output: example: {prop1: \"test\"}\n// Value reassigned\nexample = 5;\nconsole.log( example ); // Expect output: 5\n```", "```js\n// Declared and initialized\nlet example = { prop1: 'test' };\nconsole.log( 'example:', example );\n// Expect output: example: {prop1: 'test\"}\n// Value reassigned\nexample = 5;\nconsole.log( example ); // Expect output: 5\n```", "```js\n// Referenced before declaration\nconsole.log( example );\n// Expect ReferenceError because example is not defined\nlet example = 'example';\n```", "```js\n// Referenced before declaration\nconsole.log( example );\n// Expect ReferenceError because example is not defined\nconst example = 'example';\n```", "```js\n// Declared and initialized\nconst example = { prop1: 'test' };\n// Variable reassigned\nexample = 5;\n// Expect TypeError error because variable was declared with const\n// Object property updated\nexample.prop1 = 5;\n// Expect no error because subproperty was modified\n```", "```js\nvar hoisted = 'this got hoisted';\ntry{\n console.log(notHoisted1);\n} catch(err){}\nlet notHoisted1 = 5;\ntry{\n console.log(notHoisted2);\n} catch(err){}\nconst notHoisted2 = [1,2,3];\ntry{\n notHoisted2 = 'new value';\n} catch(err){}\nnotHoisted2.push(5);\n```", "```js\n( arg1, arg2, ..., argn ) => { /* Do function stuff here */ }\n```", "```js\nconst fn1 = function( a, b ) { return a + b; };\nconst fn2 = ( a, b ) => { return a + b; };\nconsole.log( fn1( 3 ,5 ), fn2( 3, 5 ) );\n```", "```js\n// Single argument arrow function\narg1 => { /* Do function stuff here */ }\n// Non simple identifier function argument\n( arg1 = 10 ) => { /* Do function stuff here */ }\n```", "```js\n// No arguments passed into the function\n( ) => { /* Do function stuff here */ }\n```", "```js\n// Multiple line body arrow function\n( arg1, arg2 ) => { \n  console.log( `This is arg1: ${arg1}` );\n  console.log( `This is arg2: ${arg2}` );\n  /* Many more lines of code can go here */\n}\n// Single line body arrow function\n( arg1, arg2 ) => console.log( `This is arg1: ${arg1}` )\n```", "```js\n// With return keyword - not necessary\n( num1, num2 ) => { return ( num1 + num2 ) }\n// If called with arguments num1 = 5 and num2 = 5, expected output is 10\n// Without return keyword or braces\n( num1, num2 ) => num1 + num2\n// If called with arguments num1 = 5 and num2 = 5, expected output is 10\n```", "```js\n// Arrow function with a single line body\n// Assume numArray is an array of numbers\n( numArray ) => numArray.filter( n => n > 5).map( n => n - 1 ).every( n => n < 10 )\n// Arrow function with a single line body broken into multiple lines\n// Assume numArray is an array of numbers\n( numArray ) => (\n  numArray.filter( n => n > 5)\n          .map( n => n - 1 )\n          .every( n => n < 10 )\n) \n```", "```js\n// Arrow function with an object literal in the body\n( num1, num2 ) => ( { prop1: num1, prop2: num2 } ) // Returns an object\n```", "```js\nlet fn1 = ( a, b ) => { … };\nlet fn2 = ( a, b ) => a * b;\nlet fn3 = a => { … };\nlet fn4 = () => { … };\nlet fn5 = ( a ) => ( …  );\n```", "```js\nconst example = \"pretty\";\nconsole.log( `Template literals are ${ example } useful!!!` ); \n// Expected output: Template literals are pretty useful!!!\n```", "```js\n// Using normal strings\nconsole.log( 'This is line 1\\nThis is line 2' );\n// Expected output: This is line 1\n// This is line 2\n// Using template literals\nconsole.log( `This is line 1\nThis is line 2` );\n// Expected output: This is line 1\n// This is line 2\n```", "```js\nlet a = 5, b = 10;\nconsole.log( a + ' + ' + b + ' is equal to ' + ( a + b ) );\nconsole.log( `${a} + ${b} is equal to ${a + b}` );\n```", "```js\nfunction javascriptOrCPlusPlus() { return 'JavaScript'; }\nconst outputLiteral = `We are learning about ${ `Professional ${ javascriptOrCPlusPlus() }` }`\n```", "```js\n// Define the tag function\nfunction tagFunction( strings, numExp, fruitExp ) { \n  const str0 = strings[0]; // \"We have\"\n  const str1 = strings[1]; // \" of \"\n  const quantity = numExp < 10 ? 'very few' : 'a lot';\n  return str0 + quantity + str1 + fruitExp + str2;\n}\nconst fruit = 'apple', num = 8;\n// Note: lack of parenthesis or whitespace when calling tag function\nconst output = tagFunction`We have ${num} of ${fruit}. Exciting!`\nconsole.log( output )\n// Expected output: We have very few of apples. Exciting!!\n```", "```js\nfunction tagFunction( strings ){ console.log( strings.raw[0] ); }\ntagFunction`This is line 1\\. \\n This is line 2.`\n// Expected output: \"This is line 1\\. \\n This is line 2.\" The characters //'\\' and 'n' are not parsed into a newline character\n```", "```js\n{\n  address: '123 Main St, San Francisco CA, USA',\n  floors: 2,\n  price: 5000000,\n  owner: 'John Doe'\n}\n```", "```js\nfunction parseHouse( property ) {\n return `${property.owner} is selling the property at ${property.address} for ${property.price} USD`\n}\nconst house = {\n address: \"123 Main St, San Francisco CA, USA\",\n floors: 2,\n price: 5000000,\n owner: \"John Doe\"\n};\nconsole.log( parseHouse( house ) );\n```", "```js\nfunction getPersionES5( name, age, height ) {\n  return {\n    name: name,\n    age: age,\n    height: height\n  };\n}\ngetPersionES5( 'Zachary', 23, 195 )\n// Expected output: { name: 'Zachary', age: 23, height: 195 }\n```", "```js\nfunction getPersionES6( name, age, height ) {\n  return {\n    name,\n    age,\n    height\n  };\n}\ngetPersionES6( 'Zachary', 23, 195 )\n// Expected output: { name: 'Zachary', age: 23, height: 195 }\n```", "```js\nfunction getPersonES5( name, age, height ) {\n  return {\n    name: name,\n    height: height,\n    getAge: function(){ return age; }\n  };\n}\ngetPersonES5( 'Zachary', 23, 195 ).getAge()\n// Expected output: 23\n```", "```js\nfunction getPersionES6( name, age, height ) {\n  return {\n    name,\n    height,\n    getAge(){ return age; }\n  };\n}\ngetPersionES6( 'Zachary', 23, 195 ).getAge()\n// Expected output: 23\n```", "```js\nconst varName = 'firstName';\nconst person = {\n  [ varName ] = 'John',\n  lastName: 'Smith'\n};\nconsole.log( person.firstName ); // Expected output: John\n```", "```js\nconst varName = 'first';\nfunction computeNameType( type ) {\n  return type + 'Name';\n}\nconst person = {\n  [ varName + 'Name' ] = 'John',\n  [ computeNameType( 'last' ) ]: 'Smith'\n};\nconsole.log( person.firstName ); // Expected output: John\nconsole.log( person.lastName ); // Expected output: Smith\n```", "```js\nconst PI = 3.1415;\nconst INCHES_TO_FEET = 0.083333;\nconst exportObject = {\n PI,\n INCHES_TO_FEET,\n sum( n1, n2 ) {\n   return n1 + n2;\n },\n subtract( n1, n2 ) {\n   return n1 - n2;\n }\n};\nconsole.log( exportObject );\n```", "```js\nlet names = [ 'John', 'Michael' ];\nlet [ name1, name2 ] = names;\nconsole.log( name1 ); // Expected output: 'John'\nconsole.log( name2 ); // Expected output: 'Michael'\n```", "```js\nlet names = [ 'John', 'Michael' ];\nlet [ name1 ] = names\nlet [ name2, name3, name4 ] = names;\nconsole.log( name1 ); // Expected output: 'John'\nconsole.log( name2 ); // Expected output: 'John'\nconsole.log( name3 ); // Expected output: 'Michael'\nconsole.log( name4 ); // Expected output: undefined\n```", "```js\nlet names = [ 'John', 'Michael', 'Jessica', 'Susan' ];\nlet [ name1,, name3 ] = names;\n// Note the missing variable name for the second array item\nlet [ ,,, ] = names; // Ignores all items in the array\nconsole.log( name1 ); // Expected output: 'John'\nconsole.log( name3 ); // Expected output: 'Jessica'\n```", "```js\nlet [ a = 1, b = 2, c = 3 ] = [ 'cat', null ]; \nconsole.log( a ); // Expected output: 'cat'\nconsole.log( b ); // Expected output: null\nconsole.log( c ); // Expected output: 3\n```", "```js\nlet a = 10;\nlet b = 5;\n[ a, b ] = [ b, a ];\nconsole.log( a ); // Expected output: 5\nconsole.log( b ); // Expected output: 10\n```", "```js\nconst data = [ 1, 2, 3 ];\nconst [ a, , b, c = 4 ] = data;\nconsole.log( a, b, c );\n```", "```js\nfunction fn( num1, num2, ...args ) {\n  // Destructures an indefinite number of function parameters into the\n//array args, excluding the first two arguments passed in.\n  console.log( num1 );\n  console.log( num2 );\n  console.log( args );\n}\nfn( 1, 2, 3, 4, 5, 6 );\n// Expected output\n// 1\n// 2\n// [ 3, 4, 5, 6 ]\n```", "```js\nfunction fn( ...[ n1, n2, n3 ] ) {\n  // Destructures an indefinite number of function parameters into the\n// array args, which is destructured into 3 variables\n  console.log( n1, n2, n3 );\n}\nfn( 1, 2 ); // Expected output: 1, 2, undefined\n```", "```js\nfunction fn( n1, n2, n3 ) {\n  console.log( n1, n2, n3 );\n}\nconst values = [ 1, 2, 3 ];\nfn( ...values ); // Expected output: 1, 2, 3\n```", "```js\nconst [ n1, n2, n3, ...remaining ] = [ 1, 2, 3, 4, 5, 6 ];\nconsole.log( n1 ); // Expected output: 1\nconsole.log( n2 ); // Expected output: 2\nconsole.log( n3 ); // Expected output: 3\nconsole.log( remaining ); // Expected output: [ 4, 5, 6 ]\n```", "```js\nconst obj = { firstName: 'Bob', lastName: 'Smith' };\nconst { firstName, lastName } = obj;\nconsole.log( firstName ); // Expected output: 'Bob'\nconsole.log( lastName ); // Expected output: 'Smith'\n```", "```js\nconst obj = { firstName: 'Bob', lastName: 'Smith' };\nconst { firstName, middleName } = obj;\nconsole.log( firstName ); // Expected output: 'Bob'\nconsole.log( middleName ); // Expected output: undefined\n```", "```js\nconst obj = { firstName: 'Bob', lastName: 'Smith' };\nconst { firstName: first, lastName } = obj;\nconsole.log( first ); // Expected output: 'Bob'\nconsole.log( lastName ); // Expected output: 'Smith'\n```", "```js\nconst obj = { firstName: 'Bob', lastName: 'Smith' };\nconst { firstName = 'Samantha', middleName = 'Chris' } = obj;\nconsole.log( firstName ); // Expected output: 'Bob'\nconsole.log( middleName ); // Expected output: 'Chris'\n```", "```js\nconst obj = { firstName: 'Bob', lastName: 'Smith' };\nconst { firstName: first = 'Samantha', middleName: middle = 'Chris' } = obj;\nconsole.log( first ); // Expected output: 'Bob'\nconsole.log( middle); // Expected output: 'Chris'\n```", "```js\nconst data = { f1: 'v1', f2: '2', f3: 'v3' };\nconst { f1, f2: field2, f4 = 'v4' } = data;\nconsole.log( f1, field2, f4 );\n```", "```js\nconst obj = { firstName: 'Bob', lastName: 'Smith' };\nlet firstName, lastName;\n( { firstName: first, lastName } = obj );\n// Note parentheses around expression\nconsole.log( firstName ); // Expected output: 'Bob'\nconsole.log( lastName ); // Expected output: 'Smith'\n```", "```js\nconst obj = { firstName: 'Bob', middleName: 'Chris', lastName: 'Smith' };\nconst { firstName, ...otherNames } = obj;\nconsole.log( firstName ); // Expected output: 'Bob'\nconsole.log( otherNames );\n// Expected output: { middleName: 'Chris', lastName: 'Smith' }\n```", "```js\nconst data = { arr: [ 1, 2, 3 ] };\nconst { arr: [ , v2 ] } = data;\nconsole.log( v2 ); \n```", "```js\n[\n {\n   title: 'Linear Algebra II',\n   description: 'Advanced linear algebra.',\n   texts: [ {\n     author: 'James Smith',\n     price: 120,\n     ISBN: '912-6-44-578441-0'\n   } ]\n },\n { ... },\n { ... }\n]\n```", "```js\n    [ course ] = [ … ]\n    ```", "```js\n    [ { texts: textbooks} ] = [ … ]\n    ```", "```js\n    [ { texts: [ textbook ] } ] = [ … ]\n    ```", "```js\n    [ { texts: [ { ISBN } ] } ] = [ … ]\n    ```", "```js\nconst courseCatalogMetadata = [\n {\n   title: 'Linear Algebra II',\n   description: 'Advanced linear algebra.',\n   texts: [ {\n     author: 'James Smith',\n     price: 120,\n     ISBN: '912-6-44-578441-0'\n   } ]\n }\n];\nconst [ course ] = courseCatalogMetadata;\nconst [ { texts: textbooks } ] = courseCatalogMetadata;\nconst [ { texts: [ textbook ] } ] = courseCatalogMetadata;\nconst [ { texts: [ { ISBN } ] } ] = courseCatalogMetadata;\nconsole.log( course );\nconsole.log( textbooks );\nconsole.log( textbook );\nconsole.log( ISBN );\n```", "```js\nclass name { /* class stuff goes here */ }\n```", "```js\nclass House{\n  constructor(address, floors = 1, garage = false) {\n    this.address = address;\n    this.floors = floors;\n    this.garage = garage;\n  }\n}\n```", "```js\nclass Vehicle {\n  constructor( wheels, topSpeed ) {\n    this.wheels = wheels;\n    this.topSpeed = topSpeed;\n  }\n}\nconst tricycle = new Vehicle( 3, 20 );\nconsole.log( tricycle.wheels, tricycle.topSpeed );\n```", "```js\nclass House{\n  constructor(address, floors = 1) {\n    this.address = address;\n    this.floors = floors;\n  }\n}\n// Instantiate the class\nlet myHouse = new House( '1100 Fake St., San Francisco CA, USA', 2, false );\n```", "```js\nclass House{\n  constructor( address, floors = 1) {\n    this.address = address;\n    this.floors = floors;\n  }\n  getFloors() {\n    return this.floors;\n  }\n}\nlet myHouse = new House( '1100 Fake St., San Francisco CA, USA', 2 );\nconsole.log( myHouse.getFloors() ); // Expected output: 2\n```", "```js\nclass House {}\nclass Mansion extends House {}\n```", "```js\nclass House {\n  constructor( address = 'somewhere' ) {\n    this.address = address;\n  }\n}\nclass Mansion extends House {\n  constructor( address, floors ) {\n    super( address );\n    this.floors = floors;\n  }\n}\nlet mansion = new Mansion( 'Hollywood CA, USA', 6, 'Brad Pitt' );\nconsole.log( mansion.floors ); // Expected output: 6\n```", "```js\n// math-module-1.js\nexport const PI = 3.1415;\nexport const DEGREES_IN_CIRCLE = 360;\nexport function convertDegToRad( degrees ) {\n  return degrees * PI / ( DEGREES_IN_CIRCLE /2 );\n}\n// math-module-2.js\nconst PI = 3.1415;\nconst DEGREES_IN_CIRCLE = 360;\nfunction convertDegToRad( degrees ) {\n  return degrees * PI / ( DEGREES_IN_CIRCLE /2 );\n}\nexport { PI, DEGREES_IN_CIRCLE, convertDegToRad };\n```", "```js\n// HouseClass.js\nexport default class() { /* Class body goes here */ }\n// myFunction.js\nexport default function() { /* Function body goes here */ }\n```", "```js\n// math-module.js\nexport const PI = 3.1415;\nexport const DEGREES_IN_CIRCLE = 360;\n// index1.js\nimport { PI } from 'math-module.js'\n// index2.js\nimport { PI, DEGREES_IN_CIRCLE } from 'math-module.js'\n// index3.js\nimport { PI as pi, DEGREES_IN_CIRCLE as degInCircle } from 'math-module.js'\n// index4.js\nimport * as MathModule from 'math-module.js'\n```", "```js\n// email-callback-api.js\nexport function authenticate( … ){ … }\nexport function sendEmail( … ){ … }\nexport function listEmails( … ){ … }\n// app.js\nimport * as EmailAPI from 'email-callback-api.js';\nconst credentials = { password: '****', user: 'Zach' };\nEmailAPI.authenticate( credentials, () => {\n  EmailAPI.send( { to: 'ceo@google.com', subject: 'promotion', body: 'Please promote me' }, () => {} );'\n} );\n```", "```js\n<script type=\"module\" src=\"img/module.js\"></script>\n```", "```js\n<script type=\"module\">\n  import * as ModuleExample from './path/to/module.js';\n</script>\n```", "```js\n<script type=\"module\" src=\"img/es6-module-supported.js\"></script>\n<script nomodule src=\"img/es6-module-NOT-supported.js\"></script>\n```", "```js\nclass Car {\n constructor( make, model, year, color ) {\n   this.make = make;\n   this.model = model;\n   this.year = year;\n   this.color = color;\n }\n setColor( color ) {\n   this.color = color;\n }\n}\nlet subaru = new Car( 'Subaru', 'Outback', 2005, 'Grey' );\nsubaru.setColor( 'Red' );\n```", "```js\n{\n \"devDependencies\": {\n   \"babel-cli\": \"^6.26.0\"\n }\n}\n```", "```js\n\"devDependencies\": {\n \"babel-cli\": \"^6.26.0\",\n \"babel-preset-es2015\": \"^6.24.1\"\n}\n```", "```js\n{\n  \"presets\": [\"es2015\"]\n}\n```", "```js\nconst sum5 = inputNumber  => inputNumber + 5;\nconsole.log( `The sum of 5 and 5 is ${sum5(5)}!`);\n```", "```js\n\"scripts\": {\n \"transpile\": \"babel app.js --out-file app.transpiled.js --source-maps\"\n}\n```", "```js\n// File 1: package.json\n{\n \"scripts\": {\n   \"transpile\": \"babel ./app.js --out-file app.transpiled.js --source-maps\"\n },\n \"devDependencies\": {\n   \"babel-cli\": \"^6.26.0\",\n   \"babel-preset-es2015\": \"^6.24.1\"\n }\n}\n```", "```js\n// File 2: .babelrc\n{ \"presets\": [\"es2015\"] }\n```", "```js\n// File 3: app.transpiled.js\nvar fn1 = function fn1(a, b) { … };\nvar fn2 = function fn2(a, b) { … };\nvar fn3 = function fn3(a) { … };\nvar fn4 = function fn4() { … };\nvar fn5 = function fn5(a) { … };\n```", "```js\nfunction createIterator( array ){\n  let currentIndex = 0;\n  return {\n    next(){\n      return currentIndex < array.length ?\n        { value: array[ currentIndex++ ], done: false} :\n        { done: true };\n    }\n  };\n}\n```", "```js\n// Using an iterator \nlet it = createIterator( [ 'Hello', 'World' ] );\nconsole.log( it.next() );\n// Expected output: { value: 'Hello', done: false }\nconsole.log( it.next() );\n// Expected output: { value: 'World' , done: false }\nconsole.log( it.next() );\n// Expected output: { value: undefined, done: true }\n```", "```js\nfunction *testGen( data ) { yield 0; }.\n```", "```js\nfunction *gen() {\n let i = 0;\n while (true){\n   yield i++;\n }\n}\n```", "```js\nfunction *gen() {\n let i = 1;\n while (true){\n   yield i;\n   i = i * 2;\n }\n}\nconst generator = gen();\nconsole.log( generator.next(), generator.next(), generator.next() );\n```", "```js\nlet sequence = gen();\nconsole.log(sequence.next());\n//Expected output: { value: 0, done: false }\nconsole.log(sequence.next());\n//Expected output: { value: 1, done: false }\nconsole.log(sequence.next());\n//Expected output: { value: 2, done: false }\n```", "```js\nfunction *gen() {\n let i = 0;\n while (true){\n   let inData = yield i++;\n   console.log( inData );\n }\n}\nlet sequence = gen();\nsequence.next()\nsequence.next( 'test1' )\nsequence.next()\nsequence.next( 'test2' )\n// Expected output:\n// 'test1'\n// undefined\n// 'test2'\n```"]